// Generated by gencpp from file mobile_control/motorMsg.msg
// DO NOT EDIT!


#ifndef MOBILE_CONTROL_MESSAGE_MOTORMSG_H
#define MOBILE_CONTROL_MESSAGE_MOTORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_control
{
template <class ContainerAllocator>
struct motorMsg_
{
  typedef motorMsg_<ContainerAllocator> Type;

  motorMsg_()
    : omega1(0)
    , omega2(0)
    , omega3(0)
    , omega4(0)  {
    }
  motorMsg_(const ContainerAllocator& _alloc)
    : omega1(0)
    , omega2(0)
    , omega3(0)
    , omega4(0)  {
  (void)_alloc;
    }



   typedef int32_t _omega1_type;
  _omega1_type omega1;

   typedef int32_t _omega2_type;
  _omega2_type omega2;

   typedef int32_t _omega3_type;
  _omega3_type omega3;

   typedef int32_t _omega4_type;
  _omega4_type omega4;





  typedef boost::shared_ptr< ::mobile_control::motorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_control::motorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct motorMsg_

typedef ::mobile_control::motorMsg_<std::allocator<void> > motorMsg;

typedef boost::shared_ptr< ::mobile_control::motorMsg > motorMsgPtr;
typedef boost::shared_ptr< ::mobile_control::motorMsg const> motorMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_control::motorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_control::motorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobile_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mobile_control': ['/home/jeon/test_ws/src/mobile_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobile_control::motorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_control::motorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_control::motorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_control::motorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_control::motorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_control::motorMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_control::motorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6310bddbb1f6c6ea47b30f0419b43b5a";
  }

  static const char* value(const ::mobile_control::motorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6310bddbb1f6c6eaULL;
  static const uint64_t static_value2 = 0x47b30f0419b43b5aULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_control::motorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_control/motorMsg";
  }

  static const char* value(const ::mobile_control::motorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_control::motorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 omega1\n\
int32 omega2\n\
int32 omega3\n\
int32 omega4\n\
";
  }

  static const char* value(const ::mobile_control::motorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_control::motorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.omega1);
      stream.next(m.omega2);
      stream.next(m.omega3);
      stream.next(m.omega4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_control::motorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_control::motorMsg_<ContainerAllocator>& v)
  {
    s << indent << "omega1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.omega1);
    s << indent << "omega2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.omega2);
    s << indent << "omega3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.omega3);
    s << indent << "omega4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.omega4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_CONTROL_MESSAGE_MOTORMSG_H
